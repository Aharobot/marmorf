<?xml version="1.0"?>
<launch>
  <param name="/use_sim_time" value="true" />
  <param name="robot_description"
    textfile="$(find marmorf_description)/urdf/marmorf.urdf" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />


  <!-- arguments -->
  <arg name="nodelet_manager" default="velodyne_nodelet_manager" />

  <!-- in case you use velodyne_driver, comment out the following line -->
  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" output="screen"/>

    <!-- globalmap_server_nodelet -->
    <node pkg="nodelet" type="nodelet" name="globalmap_server_nodelet" args="load hdl_localization/GlobalmapServerNodelet $(arg nodelet_manager)">
      <param name="globalmap_pcd" value="$(arg pcd_file)" />
      <param name="downsample_resolution" value="0.1" />
    </node>

    <!-- hdl_localization_nodelet -->
    <node pkg="nodelet" type="nodelet" name="hdl_localization_nodelet" args="load hdl_localization/HdlLocalizationNodelet $(arg nodelet_manager)">

        <!-- use self defined imu/lidar rostopic name -->
        <!-- param name="imu_topic" value="/imu_sync" /-->
        <param name="imu_topic" value="$(arg imu_topic)" />
        <param name="lidar_topic" value="$(arg lidar_topic)" />
        <param name="lidar_frameid" value="/lidar_3d" />
        <!-- imu settings -->
        <!-- during "cool_time", imu inputs are ignored -->
        <param name="use_imu" value="true" />
        <param name="invert_imu" value="false" />
        <param name="cool_time_duration" value="2.0" />
        <!-- ndt settings -->
        <!-- if NDT is slow for your PC, try DIRECT1 serach method, which is a bit unstable but extremely fast -->
        <param name="ndt_neighbor_search_method" value="DIRECT7" />
        <param name="ndt_resolution" value="1.0" />
        <param name="downsample_resolution" value="0.1" />
        <!-- if "specify_init_pose" is true, pose estimator will be initialized with the following params -->
        <!-- otherwise, you need to input an initial pose with "2D Pose Estimate" on rviz" -->
        <param name="specify_init_pose" value="true" />

        <param name="init_pos_x" value="0.0" />
        <param name="init_pos_y" value="0.0" />
        <param name="init_pos_z" value="0.0" />
        <param name="init_ori_w" value="1.0" />
        <param name="init_ori_x" value="0.0" />
        <param name="init_ori_y" value="0.0" />
        <param name="init_ori_z" value="0.0" />
    </node>

  <node name="MapServer" pkg="map_server" type="map_server" output="screen" args="$(arg map_file)"/>
  <node name="rviz" pkg="rviz" type="rviz" required="true" />
  <node name="playbag" pkg="rosbag" type="play"
      args="--clock $(arg bag_filename)"/>

  <!-- node for handle velodyne raw packet-->
  <!-- TODO if handle another we can add code like below, they can run together?-->
  <node name="cloud_node" pkg="velodyne_pointcloud" type="cloud_node" required="true">
      <param name="calibration" value="$(find velodyne_pointcloud)/params/VLP16db.yaml"/>
      <remap from="velodyne_points" to="lidar_points"/>
  </node>

  <!-- node for draw trajectory on xray_xy png-->
  <node name="draw_trajectory" pkg="draw_trajectory" type="draw_trajectory"  output="screen" required="true">
      <param name="bag_filename" value="$(arg bag_filename)" />
  </node>


</launch>
